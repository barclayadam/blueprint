using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using JetBrains.Annotations;

namespace Blueprint.Http
{
    /// <summary>
    /// A machine-readable format for specifying errors in HTTP API responses based on https://tools.ietf.org/html/rfc7807.
    /// </summary>
    [JsonConverter(typeof(ProblemDetailsJsonConverter))]
    public class ProblemDetails
    {
        /// <summary>
        /// A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when
        /// dereferenced, it provide human-readable documentation for the problem type
        /// (e.g., using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be
        /// "about:blank".
        /// </summary>
        [JsonPropertyName("type")]
        [CanBeNull]
        public string Type { get; set; }

        /// <summary>
        /// A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence
        /// of the problem, except for purposes of localization (e.g. using proactive content negotiation;
        /// see [RFC7231], Section 3.4).
        /// </summary>
        [JsonPropertyName("title")]
        [CanBeNull]
        public string Title { get; set; }

        /// <summary>
        /// The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
        /// </summary>
        [JsonPropertyName("status")]
        public int Status { get; set; }

        /// <summary>
        /// A human-readable explanation specific to this occurrence of the problem.
        /// </summary>
        [JsonPropertyName("detail")]
        [CanBeNull]
        public string Detail { get; set; }

        /// <summary>
        /// A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
        /// </summary>
        [JsonPropertyName("instance")]
        [CanBeNull]
        public string Instance { get; set; }

        /// <summary>
        /// Extension data that MAY contain additional, problem type specific details. Extension members appear in the same
        /// namespace as other members of a problem type.
        /// </summary>
        /// <remarks>
        /// The round-tripping behavior for <see cref="Extensions"/> is determined by the implementation of the Input \ Output formatters.
        /// In particular, complex types or collection types may not round-trip to the original type when using the built-in JSON or XML formatters.
        /// </remarks>
        [JsonExtensionData]
        [CanBeNull]
        public IDictionary<string, object> Extensions { get; set; }

        /// <summary>
        /// A safe method to add an extension, ensuring the <see cref="Extensions" /> property is initialised before
        /// adding the value.
        /// </summary>
        /// <param name="key">The key of the extension.</param>
        /// <param name="value">THe value.</param>
        public void AddExtension(string key, object value)
        {
            this.Extensions ??= new Dictionary<string, object>(StringComparer.Ordinal);
            this.Extensions[key] = value;
        }
    }
}
