using System;
using System.Collections.Generic;
using JetBrains.Annotations;

namespace Blueprint;

/// <summary>
/// An exception that provides a means of carrying details about an exception that
/// can be used to generate standards-based responses depending on the API host.
/// </summary>
[Serializable]
public class ApiException : Exception
{
    private static readonly IDictionary<string, object> _emptyExtensions = new Dictionary<string, object>();

    /// <summary>
    /// Initialises a new instance of the <see cref="ApiException" /> class.
    /// </summary>
    /// <param name="title">The title of this exception, which <em>SHOULD NOT</em> change from occurrence to
    ///     occurrence.</param>
    /// <param name="type">The type of this exception, which <em>SHOULD NOT</em> change from occurrence to
    ///     occurrence, and is typically a URI that when followed gives more details of the problem.</param>
    /// <param name="detail">Detailed information about this exception, which is specific to this instance.</param>
    /// <param name="httpStatus">The HTTP status code this exception is best represented by.</param>
    /// <param name="extensions">An optional dictionary of key value pairs to be serialised with this exception
    /// for additional details, see <see cref="Extensions" />.</param>
    public ApiException(string title, string type, string detail, int httpStatus, IDictionary<string, object> extensions = null)
        : base(detail ?? title ?? type)
    {
        this.Title = title;
        this.Type = type;
        this.Detail = detail;
        this.HttpStatus = httpStatus;
        this.Extensions = extensions ?? _emptyExtensions;
    }

    /// <summary>
    /// Initialises a new instance of the <see cref="ApiException" /> class.
    /// </summary>
    /// <param name="title">The title of this exception, which <em>SHOULD NOT</em> change from occurrence to
    ///     occurrence.</param>
    /// <param name="type">The type of this exception, which <em>SHOULD NOT</em> change from occurrence to
    ///     occurrence, and is typically a URI that when followed gives more details of the problem.</param>
    /// <param name="detail">Detailed information about this exception, which is specific to this instance.</param>
    /// <param name="httpStatus">The HTTP status code this exception is best represented by.</param>
    /// <param name="inner">The exception that triggered this one.</param>
    /// <param name="extensions">An optional dictionary of key value pairs to be serialised with this exception
    /// for additional details, see <see cref="Extensions" />.</param>
    public ApiException(string title, string type, string detail, int httpStatus, Exception inner, IDictionary<string, object> extensions = null)
        : base(detail ?? title ?? type, inner)
    {
        this.Title = title;
        this.Type = type;
        this.Detail = detail;
        this.HttpStatus = httpStatus;
        this.Extensions = extensions ?? _emptyExtensions;
    }

    /// <summary>
    /// The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
    /// </summary>
    public int HttpStatus { get; }

    /// <summary>
    /// A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when
    /// dereferenced, it provide human-readable documentation for the problem type
    /// (e.g., using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be
    /// "about:blank".
    /// </summary>
    [CanBeNull]
    public string Type { get; }

    /// <summary>
    /// A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence
    /// of the problem, except for purposes of localization (e.g., using proactive content negotiation;
    /// see[RFC7231], Section 3.4).
    /// </summary>
    [CanBeNull]
    public string Title { get; }

    /// <summary>
    /// A human-readable explanation specific to this occurrence of the problem.
    /// </summary>
    [CanBeNull]
    public string Detail { get; }

    /// <summary>
    /// Extension data that MAY contain additional, problem type specific details. Extension members appear in the same
    /// namespace as other members of a problem type.
    /// </summary>
    /// <remarks>
    /// The round-tripping behavior for <see cref="Extensions"/> is determined by the implementation of the Input \ Output formatters.
    /// In particular, complex types or collection types may not round-trip to the original type when using the built-in JSON or XML formatters.
    /// </remarks>
    public IDictionary<string, object> Extensions { get; }
}