// <auto-generated />
// AuthorisationRequiredCommandExecutorPipeline

using Blueprint.Authorisation;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System.Threading.Tasks;

namespace Blueprint.Generated
{
    public class AuthorisationRequiredCommandExecutorPipeline : Blueprint.IOperationExecutorPipeline
    {
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, System.Exception> _OperationExecuting = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String>(Microsoft.Extensions.Logging.LogLevel.Debug, new Microsoft.Extensions.Logging.EventId(3, "OperationExecuting"), "Executing API operation {OperationType} with inline handler");
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, System.Exception> _AnonxxApiExceptionhasoccurredwithmessageExceptionMessage = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String>(Microsoft.Extensions.Logging.LogLevel.Information, new Microsoft.Extensions.Logging.EventId(17, "A non-5xx ApiException has occurred with message {ExceptionMessage}"), "A non-5xx ApiException has occurred with message {ExceptionMessage}");
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, System.Exception> _AnunhandledexceptionhasoccurredwithmessageExceptionMessage = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String>(Microsoft.Extensions.Logging.LogLevel.Error, new Microsoft.Extensions.Logging.EventId(18, "An unhandled exception has occurred with message {ExceptionMessage}"), "An unhandled exception has occurred with message {ExceptionMessage}");

        private readonly Microsoft.Extensions.Logging.ILogger _logger;
        private readonly Blueprint.Authorisation.IClaimsIdentityProvider _claimsIdentityProvider;

        public AuthorisationRequiredCommandExecutorPipeline(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Blueprint.Authorisation.IClaimsIdentityProvider claimsIdentityProvider)
        {
            _logger = loggerFactory.CreateLogger("AuthorisationRequiredCommandExecutorPipeline");
            _claimsIdentityProvider = claimsIdentityProvider;
        }

        public async System.Threading.Tasks.Task<Blueprint.OperationResult> ExecuteAsync(Blueprint.ApiOperationContext context)
        {
            using var activityOfAuthorisationRequiredPipeline = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("AuthorisationRequiredPipeline", System.Diagnostics.ActivityKind.Internal);
            var authorisationRequiredCommand = (Blueprint.Sample.WebApi.Api.AuthorisationRequiredCommand) context.Operation;
            try
            {

                // AuthenticationMiddlewareBuilder
                if (context.ClaimsIdentity == null)
                {
                    var claimsIdentity = _claimsIdentityProvider.Get(context);
                    context.ClaimsIdentity = claimsIdentity;
                }

                // UserContextLoaderMiddlewareBuilder
                if (context.ClaimsIdentity != null && context.ClaimsIdentity.IsAuthenticated == true)
                {
                    var userAuthorisationContextFactory = context.ServiceProvider.GetRequiredService<Blueprint.Authorisation.IUserAuthorisationContextFactory>();
                    var userAuthorisationContext = await userAuthorisationContextFactory.CreateContextAsync(context.ClaimsIdentity);
                    context.UserAuthorisationContext = userAuthorisationContext;
                }

                // ValidationMiddlewareBuilder

                // OperationExecutorMiddlewareBuilder
                using var activityOfAuthorisationRequiredCommand = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("AuthorisationRequiredCommand", System.Diagnostics.ActivityKind.Internal);
                _OperationExecuting(_logger, "AuthorisationRequiredCommand", null);
                authorisationRequiredCommand.Invoke();
                var handlerResult = Blueprint.NoResultOperationResult.Instance;;
                Blueprint.OperationResult operationResult = handlerResult;
                activityOfAuthorisationRequiredCommand?.Dispose();

                // BackgroundTaskRunnerMiddleware
                var backgroundTaskScheduler = context.ServiceProvider.GetRequiredService<Blueprint.Tasks.IBackgroundTaskScheduler>();
                await backgroundTaskScheduler.RunNowAsync();

                // ResourceEventHandlerMiddlewareBuilder
                var resourceEventRepository = context.ServiceProvider.GetRequiredService<Blueprint.Http.IResourceEventRepository>();
                var apiLinkGenerator = context.ServiceProvider.GetRequiredService<Blueprint.Http.IApiLinkGenerator>();
                await Blueprint.Http.Middleware.ResourceEventHandler.HandleAsync(resourceEventRepository, apiLinkGenerator, context, operationResult);

                // ReturnFrameMiddlewareBuilder
                return operationResult;
            }
            catch (Blueprint.Validation.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = new Blueprint.Middleware.ValidationFailedOperationResult(e.ValidationResults);
                return validationFailedOperationResult;
            }
            catch (System.ComponentModel.DataAnnotations.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = Blueprint.Middleware.ValidationMiddlewareBuilder.ToValidationFailedOperationResult(e);
                return validationFailedOperationResult;
            }
            catch (System.Exception e)
            {
                if (e is Blueprint.ApiException apiException && apiException.HttpStatus < 500)
                {
                    _AnonxxApiExceptionhasoccurredwithmessageExceptionMessage(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "OK");
                }
                else
                {
                    Blueprint.Diagnostics.BlueprintActivitySource.RecordException(context.Activity, e, false);
                    _AnunhandledexceptionhasoccurredwithmessageExceptionMessage(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "ERROR");
                    context.Activity?.SetTag("otel.status_description", e.Message);
                }
                return new Blueprint.UnhandledExceptionOperationResult(e);
            }
        }

        public async System.Threading.Tasks.Task<Blueprint.OperationResult> ExecuteNestedAsync(Blueprint.ApiOperationContext context)
        {
            using var activityOfAuthorisationRequiredNestedPipeline = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("AuthorisationRequiredNestedPipeline", System.Diagnostics.ActivityKind.Internal);
            var authorisationRequiredCommand = (Blueprint.Sample.WebApi.Api.AuthorisationRequiredCommand) context.Operation;
            try
            {

                // ValidationMiddlewareBuilder

                // OperationExecutorMiddlewareBuilder
                using var activityOfAuthorisationRequiredCommand = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("AuthorisationRequiredCommand", System.Diagnostics.ActivityKind.Internal);
                _OperationExecuting(_logger, "AuthorisationRequiredCommand", null);
                authorisationRequiredCommand.Invoke();
                var handlerResult = Blueprint.NoResultOperationResult.Instance;;
                Blueprint.OperationResult operationResult = handlerResult;
                activityOfAuthorisationRequiredCommand?.Dispose();

                // ResourceEventHandlerMiddlewareBuilder
                var resourceEventRepository = context.ServiceProvider.GetRequiredService<Blueprint.Http.IResourceEventRepository>();
                var apiLinkGenerator = context.ServiceProvider.GetRequiredService<Blueprint.Http.IApiLinkGenerator>();
                await Blueprint.Http.Middleware.ResourceEventHandler.HandleAsync(resourceEventRepository, apiLinkGenerator, context, operationResult);

                // ReturnFrameMiddlewareBuilder
                return operationResult;
            }
            catch (Blueprint.Validation.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = new Blueprint.Middleware.ValidationFailedOperationResult(e.ValidationResults);
                return validationFailedOperationResult;
            }
            catch (System.ComponentModel.DataAnnotations.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = Blueprint.Middleware.ValidationMiddlewareBuilder.ToValidationFailedOperationResult(e);
                return validationFailedOperationResult;
            }
            catch (System.Exception e)
            {
                if (e is Blueprint.ApiException apiException && apiException.HttpStatus < 500)
                {
                    _AnonxxApiExceptionhasoccurredwithmessageExceptionMessage(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "OK");
                }
                else
                {
                    Blueprint.Diagnostics.BlueprintActivitySource.RecordException(context.Activity, e, false);
                    _AnunhandledexceptionhasoccurredwithmessageExceptionMessage(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "ERROR");
                    context.Activity?.SetTag("otel.status_description", e.Message);
                }
                return new Blueprint.UnhandledExceptionOperationResult(e);
            }
        }
    }
}
