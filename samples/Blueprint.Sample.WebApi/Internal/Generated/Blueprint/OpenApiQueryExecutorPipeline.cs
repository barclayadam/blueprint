// <auto-generated />
// OpenApiQueryExecutorPipeline

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using NSwag;
using System.Threading.Tasks;

namespace Blueprint.Generated
{
    public class OpenApiQueryExecutorPipeline : Blueprint.IOperationExecutorPipeline
    {
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, System.Exception> _ApiOperationExecuting = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String>(Microsoft.Extensions.Logging.LogLevel.Debug, new Microsoft.Extensions.Logging.EventId(1, "ApiOperationExecuting"), "Executing API operation {OperationType} with inline handler");
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, System.Exception> _NonException = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String>(Microsoft.Extensions.Logging.LogLevel.Information, new Microsoft.Extensions.Logging.EventId(4, "Non500Exception"), "A non-5xx ApiException has occurred with message {ExceptionMessage}");
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, System.Exception> _UnhandledException = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String>(Microsoft.Extensions.Logging.LogLevel.Error, new Microsoft.Extensions.Logging.EventId(5, "UnhandledException"), "An unhandled exception has occurred with message {ExceptionMessage}");

        private readonly Microsoft.Extensions.Logging.ILogger _logger;
        private readonly NSwag.OpenApiDocument _openApiDocument;
        private readonly Microsoft.Extensions.Options.IOptions<Blueprint.OpenApi.OpenApiOptions> _openApiOptionsIOptions;

        public OpenApiQueryExecutorPipeline(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, NSwag.OpenApiDocument openApiDocument, Microsoft.Extensions.Options.IOptions<Blueprint.OpenApi.OpenApiOptions> openApiOptionsIOptions)
        {
            _logger = loggerFactory.CreateLogger("OpenApiQueryExecutorPipeline");
            _openApiDocument = openApiDocument;
            _openApiOptionsIOptions = openApiOptionsIOptions;
        }

        public async System.Threading.Tasks.Task<Blueprint.OperationResult> ExecuteAsync(Blueprint.ApiOperationContext context)
        {
            using var activityOfOpenApiPipeline = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("OpenApiPipeline", System.Diagnostics.ActivityKind.Internal);
            var openApiQuery = (Blueprint.OpenApi.OpenApiQuery) context.Operation;
            try
            {

                // AuthenticationMiddlewareBuilder

                // UserContextLoaderMiddlewareBuilder
                if (context.ClaimsIdentity?.IsAuthenticated == true)
                {
                    var userAuthorisationContextFactory = context.ServiceProvider.GetRequiredService<Blueprint.Authorisation.IUserAuthorisationContextFactory>();
                    var userAuthorisationContext = await userAuthorisationContextFactory.CreateContextAsync(context.ClaimsIdentity);
                    context.UserAuthorisationContext = userAuthorisationContext;
                }

                // ValidationMiddlewareBuilder

                // OperationExecutorMiddlewareBuilder
                using var activityOfOpenApiQuery = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("OpenApiQuery", System.Diagnostics.ActivityKind.Internal);
                _ApiOperationExecuting(_logger, "OpenApiQuery", null);
                var httpContext = Blueprint.Http.ApiOperationContextHttpExtensions.GetHttpContext(context);
                var handlerResult = openApiQuery.Invoke(httpContext, _openApiDocument, context, _openApiOptionsIOptions);
                Blueprint.OperationResult operationResult = handlerResult;
                activityOfOpenApiQuery?.Dispose();

                // BackgroundTaskRunnerMiddleware
                var backgroundTaskScheduler = context.ServiceProvider.GetRequiredService<Blueprint.Tasks.IBackgroundTaskScheduler>();
                await backgroundTaskScheduler.RunNowAsync();

                // ReturnFrameMiddlewareBuilder
                return operationResult;
            }
            catch (Blueprint.Validation.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = new Blueprint.Middleware.ValidationFailedOperationResult(e.ValidationResults);
                return validationFailedOperationResult;
            }
            catch (System.ComponentModel.DataAnnotations.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = Blueprint.Middleware.ValidationMiddlewareBuilder.ToValidationFailedOperationResult(e);
                return validationFailedOperationResult;
            }
            catch (System.Exception e)
            {
                if (e is Blueprint.ApiException apiException && apiException.HttpStatus < 500)
                {
                    _NonException(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "OK");
                }
                else
                {
                    Blueprint.Diagnostics.BlueprintActivitySource.RecordException(context.Activity, e, false);
                    _UnhandledException(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "ERROR");
                    context.Activity?.SetTag("otel.status_description", e.Message);
                }
                return new Blueprint.UnhandledExceptionOperationResult(e);
            }
        }

        public System.Threading.Tasks.Task<Blueprint.OperationResult> ExecuteNestedAsync(Blueprint.ApiOperationContext context)
        {
            using var activityOfOpenApiNestedPipeline = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("OpenApiNestedPipeline", System.Diagnostics.ActivityKind.Internal);
            var openApiQuery = (Blueprint.OpenApi.OpenApiQuery) context.Operation;
            try
            {

                // ValidationMiddlewareBuilder

                // OperationExecutorMiddlewareBuilder
                using var activityOfOpenApiQuery = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("OpenApiQuery", System.Diagnostics.ActivityKind.Internal);
                _ApiOperationExecuting(_logger, "OpenApiQuery", null);
                var httpContext = Blueprint.Http.ApiOperationContextHttpExtensions.GetHttpContext(context);
                var handlerResult = openApiQuery.Invoke(httpContext, _openApiDocument, context, _openApiOptionsIOptions);
                Blueprint.OperationResult operationResult = handlerResult;
                activityOfOpenApiQuery?.Dispose();

                // ReturnFrameMiddlewareBuilder
                return Task.FromResult((Blueprint.OperationResult)operationResult);
            }
            catch (Blueprint.Validation.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = new Blueprint.Middleware.ValidationFailedOperationResult(e.ValidationResults);
                return Task.FromResult((Blueprint.OperationResult)validationFailedOperationResult);
            }
            catch (System.ComponentModel.DataAnnotations.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = Blueprint.Middleware.ValidationMiddlewareBuilder.ToValidationFailedOperationResult(e);
                return Task.FromResult((Blueprint.OperationResult)validationFailedOperationResult);
            }
            catch (System.Exception e)
            {
                if (e is Blueprint.ApiException apiException && apiException.HttpStatus < 500)
                {
                    _NonException(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "OK");
                }
                else
                {
                    Blueprint.Diagnostics.BlueprintActivitySource.RecordException(context.Activity, e, false);
                    _UnhandledException(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "ERROR");
                    context.Activity?.SetTag("otel.status_description", e.Message);
                }
                return Task.FromResult((Blueprint.OperationResult)new Blueprint.UnhandledExceptionOperationResult(e));
            }
        }
    }
}
