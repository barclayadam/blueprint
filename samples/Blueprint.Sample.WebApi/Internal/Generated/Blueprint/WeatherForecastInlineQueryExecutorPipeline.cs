// <auto-generated />
// WeatherForecastInlineQueryExecutorPipeline

using Blueprint.Sample.WebApi.Data;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System.Threading.Tasks;

namespace Blueprint.Generated
{
    public class WeatherForecastInlineQueryExecutorPipeline : Blueprint.IOperationExecutorPipeline
    {
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, int, System.Exception> _ValidatedFailed = Microsoft.Extensions.Logging.LoggerMessage.Define<System.Int32>(Microsoft.Extensions.Logging.LogLevel.Debug, new Microsoft.Extensions.Logging.EventId(3, "ValidatedFailed"), "Validation failed with {ValidationFailureCount} failures, returning ValidationFailedOperationResult");
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, System.Exception> _ApiOperationExecuting = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String>(Microsoft.Extensions.Logging.LogLevel.Debug, new Microsoft.Extensions.Logging.EventId(1, "ApiOperationExecuting"), "Executing API operation {OperationType} with inline handler");
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, System.Exception> _NonException = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String>(Microsoft.Extensions.Logging.LogLevel.Information, new Microsoft.Extensions.Logging.EventId(4, "Non500Exception"), "A non-5xx ApiException has occurred with message {ExceptionMessage}");
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, System.Exception> _UnhandledException = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String>(Microsoft.Extensions.Logging.LogLevel.Error, new Microsoft.Extensions.Logging.EventId(5, "UnhandledException"), "An unhandled exception has occurred with message {ExceptionMessage}");

        private readonly Microsoft.Extensions.Logging.ILogger _logger;
        private readonly Blueprint.Sample.WebApi.Data.IWeatherDataSource _weatherDataSource;

        public WeatherForecastInlineQueryExecutorPipeline(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Blueprint.Sample.WebApi.Data.IWeatherDataSource weatherDataSource)
        {
            _logger = loggerFactory.CreateLogger("WeatherForecastInlineQueryExecutorPipeline");
            _weatherDataSource = weatherDataSource;
        }

        public async System.Threading.Tasks.Task<Blueprint.OperationResult> ExecuteAsync(Blueprint.ApiOperationContext context)
        {
            var httpContext = Blueprint.Http.ApiOperationContextHttpExtensions.GetHttpContext(context);
            using var activityOfWeatherForecastInlinePipeline = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("WeatherForecastInlinePipeline", System.Diagnostics.ActivityKind.Internal);
            var weatherForecastInlineQuery = (Blueprint.Sample.WebApi.Api.WeatherForecastInlineQuery) context.Operation;
            try
            {

                // MessagePopulationMiddlewareBuilder
                var fromCookieMyCookie = httpContext.Request.Cookies["MyCookie"];
                weatherForecastInlineQuery.MyCookie = fromCookieMyCookie != null ? fromCookieMyCookie.ToString() : weatherForecastInlineQuery.MyCookie;

                var fromCookieMyCookieNumber = httpContext.Request.Cookies["a-different-cookie-name"];
                weatherForecastInlineQuery.MyCookieNumber = fromCookieMyCookieNumber != null ? int.Parse(fromCookieMyCookieNumber.ToString()) : weatherForecastInlineQuery.MyCookieNumber;

                var fromCookieMyCookieNumberTwo = httpContext.Request.Cookies["a-different-cookie-name-two"];
                weatherForecastInlineQuery.MyCookieNumberTwo = fromCookieMyCookieNumberTwo != null ? int.Parse(fromCookieMyCookieNumberTwo.ToString()) : weatherForecastInlineQuery.MyCookieNumberTwo;

                var fromHeaderMyHeader = httpContext.Request.Headers["X-Header-Key"];
                weatherForecastInlineQuery.MyHeader = fromHeaderMyHeader != Microsoft.Extensions.Primitives.StringValues.Empty ? fromHeaderMyHeader.ToString() : weatherForecastInlineQuery.MyHeader;

                var fromQueryCity = httpContext.Request.Query["City"];
                weatherForecastInlineQuery.City = fromQueryCity != Microsoft.Extensions.Primitives.StringValues.Empty ? fromQueryCity.ToString() : weatherForecastInlineQuery.City;

                var fromQueryDays = httpContext.Request.Query["Days"] == Microsoft.Extensions.Primitives.StringValues.Empty ? httpContext.Request.Query["Days[]"] : httpContext.Request.Query["Days"];
                weatherForecastInlineQuery.Days = fromQueryDays != Microsoft.Extensions.Primitives.StringValues.Empty ? (System.String[]) Blueprint.Http.MessagePopulation.HttpPartMessagePopulationSource.ConvertValuesToArray<string>(fromQueryDays) : weatherForecastInlineQuery.Days;


                // AuthenticationMiddlewareBuilder

                // UserContextLoaderMiddlewareBuilder
                if (context.ClaimsIdentity?.IsAuthenticated == true)
                {
                    var userAuthorisationContextFactory = context.ServiceProvider.GetRequiredService<Blueprint.Authorisation.IUserAuthorisationContextFactory>();
                    var userAuthorisationContext = await userAuthorisationContextFactory.CreateContextAsync(context.ClaimsIdentity);
                    context.UserAuthorisationContext = userAuthorisationContext;
                }

                // ValidationMiddlewareBuilder
                var validationFailures = new Blueprint.Validation.ValidationFailures();
                var validationContext = new System.ComponentModel.DataAnnotations.ValidationContext(weatherForecastInlineQuery);
                validationContext.MemberName = "City";
                validationContext.DisplayName = "City";

                // context.Descriptor.Properties[0] == WeatherForecastInlineQuery.City
                foreach (var attribute in context.Descriptor.PropertyAttributes[0])
                {
                    if (attribute is System.ComponentModel.DataAnnotations.ValidationAttribute x)
                    {
                        var result =  x.GetValidationResult(weatherForecastInlineQuery.City, validationContext);
                        if (result != System.ComponentModel.DataAnnotations.ValidationResult.Success)
                        {
                            validationFailures.AddFailure(result);
                        }
                    }
                }
                if (validationFailures.Count > 0)
                {
                    _ValidatedFailed(_logger, validationFailures.Count, null);
                    var validationFailedOperationResult = new Blueprint.Middleware.ValidationFailedOperationResult(validationFailures);
                    return validationFailedOperationResult;
                }

                // OperationExecutorMiddlewareBuilder
                using var activityOfWeatherForecastInlineQuery = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("WeatherForecastInlineQuery", System.Diagnostics.ActivityKind.Internal);
                _ApiOperationExecuting(_logger, "WeatherForecastInlineQuery", null);
                var handlerResult = weatherForecastInlineQuery.Invoke(_weatherDataSource);
                Blueprint.OperationResult operationResult = new Blueprint.OkResult(handlerResult);
                activityOfWeatherForecastInlineQuery?.Dispose();

                // BackgroundTaskRunnerMiddleware
                var backgroundTaskScheduler = context.ServiceProvider.GetRequiredService<Blueprint.Tasks.IBackgroundTaskScheduler>();
                await backgroundTaskScheduler.RunNowAsync();

                // ReturnFrameMiddlewareBuilder
                return operationResult;
            }
            catch (Blueprint.Validation.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = new Blueprint.Middleware.ValidationFailedOperationResult(e.ValidationResults);
                return validationFailedOperationResult;
            }
            catch (System.ComponentModel.DataAnnotations.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = Blueprint.Middleware.ValidationMiddlewareBuilder.ToValidationFailedOperationResult(e);
                return validationFailedOperationResult;
            }
            catch (System.Exception e)
            {
                if (e is Blueprint.ApiException apiException && apiException.HttpStatus < 500)
                {
                    _NonException(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "OK");
                }
                else
                {
                    Blueprint.Diagnostics.BlueprintActivitySource.RecordException(context.Activity, e, false);
                    _UnhandledException(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "ERROR");
                    context.Activity?.SetTag("otel.status_description", e.Message);
                }
                return new Blueprint.UnhandledExceptionOperationResult(e);
            }
        }

        public System.Threading.Tasks.Task<Blueprint.OperationResult> ExecuteNestedAsync(Blueprint.ApiOperationContext context)
        {
            using var activityOfWeatherForecastInlineNestedPipeline = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("WeatherForecastInlineNestedPipeline", System.Diagnostics.ActivityKind.Internal);
            var weatherForecastInlineQuery = (Blueprint.Sample.WebApi.Api.WeatherForecastInlineQuery) context.Operation;
            try
            {

                // ValidationMiddlewareBuilder
                var validationFailures = new Blueprint.Validation.ValidationFailures();
                var validationContext = new System.ComponentModel.DataAnnotations.ValidationContext(weatherForecastInlineQuery);
                validationContext.MemberName = "City";
                validationContext.DisplayName = "City";

                // context.Descriptor.Properties[0] == WeatherForecastInlineQuery.City
                foreach (var attribute in context.Descriptor.PropertyAttributes[0])
                {
                    if (attribute is System.ComponentModel.DataAnnotations.ValidationAttribute x)
                    {
                        var result =  x.GetValidationResult(weatherForecastInlineQuery.City, validationContext);
                        if (result != System.ComponentModel.DataAnnotations.ValidationResult.Success)
                        {
                            validationFailures.AddFailure(result);
                        }
                    }
                }
                if (validationFailures.Count > 0)
                {
                    _ValidatedFailed(_logger, validationFailures.Count, null);
                    var validationFailedOperationResult = new Blueprint.Middleware.ValidationFailedOperationResult(validationFailures);
                    return Task.FromResult((Blueprint.OperationResult)validationFailedOperationResult);
                }

                // OperationExecutorMiddlewareBuilder
                using var activityOfWeatherForecastInlineQuery = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("WeatherForecastInlineQuery", System.Diagnostics.ActivityKind.Internal);
                _ApiOperationExecuting(_logger, "WeatherForecastInlineQuery", null);
                var handlerResult = weatherForecastInlineQuery.Invoke(_weatherDataSource);
                Blueprint.OperationResult operationResult = new Blueprint.OkResult(handlerResult);
                activityOfWeatherForecastInlineQuery?.Dispose();

                // ReturnFrameMiddlewareBuilder
                return Task.FromResult((Blueprint.OperationResult)operationResult);
            }
            catch (Blueprint.Validation.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = new Blueprint.Middleware.ValidationFailedOperationResult(e.ValidationResults);
                return Task.FromResult((Blueprint.OperationResult)validationFailedOperationResult);
            }
            catch (System.ComponentModel.DataAnnotations.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = Blueprint.Middleware.ValidationMiddlewareBuilder.ToValidationFailedOperationResult(e);
                return Task.FromResult((Blueprint.OperationResult)validationFailedOperationResult);
            }
            catch (System.Exception e)
            {
                if (e is Blueprint.ApiException apiException && apiException.HttpStatus < 500)
                {
                    _NonException(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "OK");
                }
                else
                {
                    Blueprint.Diagnostics.BlueprintActivitySource.RecordException(context.Activity, e, false);
                    _UnhandledException(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "ERROR");
                    context.Activity?.SetTag("otel.status_description", e.Message);
                }
                return Task.FromResult((Blueprint.OperationResult)new Blueprint.UnhandledExceptionOperationResult(e));
            }
        }
    }
}
