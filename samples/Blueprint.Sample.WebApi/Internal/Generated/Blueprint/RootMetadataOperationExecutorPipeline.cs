// <auto-generated />
// RootMetadataOperationExecutorPipeline

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System.Threading.Tasks;

namespace Blueprint.Generated
{
    public class RootMetadataOperationExecutorPipeline : Blueprint.IOperationExecutorPipeline
    {
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, System.Exception> _OperationExecuting = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String>(Microsoft.Extensions.Logging.LogLevel.Debug, new Microsoft.Extensions.Logging.EventId(3, "OperationExecuting"), "Executing API operation {OperationType} with inline handler");
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, System.Exception> _AnonxxApiExceptionhasoccurredwithmessageExceptionMessage = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String>(Microsoft.Extensions.Logging.LogLevel.Information, new Microsoft.Extensions.Logging.EventId(1, "A non-5xx ApiException has occurred with message {ExceptionMessage}"), "A non-5xx ApiException has occurred with message {ExceptionMessage}");
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, System.Exception> _AnunhandledexceptionhasoccurredwithmessageExceptionMessage = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String>(Microsoft.Extensions.Logging.LogLevel.Error, new Microsoft.Extensions.Logging.EventId(2, "An unhandled exception has occurred with message {ExceptionMessage}"), "An unhandled exception has occurred with message {ExceptionMessage}");

        private readonly Microsoft.Extensions.Logging.ILogger _logger;

        public RootMetadataOperationExecutorPipeline(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory)
        {
            _logger = loggerFactory.CreateLogger("RootMetadataOperationExecutorPipeline");
        }

        public async System.Threading.Tasks.Task<Blueprint.OperationResult> ExecuteAsync(Blueprint.ApiOperationContext context)
        {
            using var activityOfRootMetadataOperationPipeline = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("RootMetadataOperationPipeline", System.Diagnostics.ActivityKind.Internal);
            var rootMetadataOperation = (Blueprint.Http.RootMetadataOperation) context.Operation;
            try
            {

                // UserContextLoaderMiddlewareBuilder
                context.UserAuthorisationContext = Blueprint.AnonymousUserAuthorisationContext.Instance;

                // ValidationMiddlewareBuilder

                // OperationExecutorMiddlewareBuilder
                using var activityOfRootMetadataOperation = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("RootMetadataOperation", System.Diagnostics.ActivityKind.Internal);
                _OperationExecuting(_logger, "RootMetadataOperation", null);
                var apiLinkGenerator = context.ServiceProvider.GetRequiredService<Blueprint.Http.IApiLinkGenerator>();
                var handlerResult = rootMetadataOperation.Invoke(apiLinkGenerator, context.DataModel);
                Blueprint.OperationResult operationResult = new Blueprint.OkResult(handlerResult);
                activityOfRootMetadataOperation?.Dispose();

                // BackgroundTaskRunnerMiddleware
                var backgroundTaskScheduler = context.ServiceProvider.GetRequiredService<Blueprint.Tasks.IBackgroundTaskScheduler>();
                await backgroundTaskScheduler.RunNowAsync();

                // ReturnFrameMiddlewareBuilder
                return operationResult;
            }
            catch (Blueprint.Validation.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = new Blueprint.Middleware.ValidationFailedOperationResult(e.ValidationResults);
                return validationFailedOperationResult;
            }
            catch (System.ComponentModel.DataAnnotations.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = Blueprint.Middleware.ValidationMiddlewareBuilder.ToValidationFailedOperationResult(e);
                return validationFailedOperationResult;
            }
            catch (System.Exception e)
            {
                if (e is Blueprint.ApiException apiException && apiException.HttpStatus < 500)
                {
                    _AnonxxApiExceptionhasoccurredwithmessageExceptionMessage(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "OK");
                }
                else
                {
                    Blueprint.Diagnostics.BlueprintActivitySource.RecordException(context.Activity, e, false);
                    _AnunhandledexceptionhasoccurredwithmessageExceptionMessage(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "ERROR");
                    context.Activity?.SetTag("otel.status_description", e.Message);
                }
                return new Blueprint.UnhandledExceptionOperationResult(e);
            }
        }

        public System.Threading.Tasks.Task<Blueprint.OperationResult> ExecuteNestedAsync(Blueprint.ApiOperationContext context)
        {
            using var activityOfRootMetadataOperationNestedPipeline = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("RootMetadataOperationNestedPipeline", System.Diagnostics.ActivityKind.Internal);
            var rootMetadataOperation = (Blueprint.Http.RootMetadataOperation) context.Operation;
            try
            {

                // ValidationMiddlewareBuilder

                // OperationExecutorMiddlewareBuilder
                using var activityOfRootMetadataOperation = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("RootMetadataOperation", System.Diagnostics.ActivityKind.Internal);
                _OperationExecuting(_logger, "RootMetadataOperation", null);
                var apiLinkGenerator = context.ServiceProvider.GetRequiredService<Blueprint.Http.IApiLinkGenerator>();
                var handlerResult = rootMetadataOperation.Invoke(apiLinkGenerator, context.DataModel);
                Blueprint.OperationResult operationResult = new Blueprint.OkResult(handlerResult);
                activityOfRootMetadataOperation?.Dispose();

                // ReturnFrameMiddlewareBuilder
                return Task.FromResult((Blueprint.OperationResult)operationResult);
            }
            catch (Blueprint.Validation.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = new Blueprint.Middleware.ValidationFailedOperationResult(e.ValidationResults);
                return Task.FromResult((Blueprint.OperationResult)validationFailedOperationResult);
            }
            catch (System.ComponentModel.DataAnnotations.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = Blueprint.Middleware.ValidationMiddlewareBuilder.ToValidationFailedOperationResult(e);
                return Task.FromResult((Blueprint.OperationResult)validationFailedOperationResult);
            }
            catch (System.Exception e)
            {
                if (e is Blueprint.ApiException apiException && apiException.HttpStatus < 500)
                {
                    _AnonxxApiExceptionhasoccurredwithmessageExceptionMessage(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "OK");
                }
                else
                {
                    Blueprint.Diagnostics.BlueprintActivitySource.RecordException(context.Activity, e, false);
                    _AnunhandledexceptionhasoccurredwithmessageExceptionMessage(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "ERROR");
                    context.Activity?.SetTag("otel.status_description", e.Message);
                }
                return Task.FromResult((Blueprint.OperationResult)new Blueprint.UnhandledExceptionOperationResult(e));
            }
        }
    }
}
