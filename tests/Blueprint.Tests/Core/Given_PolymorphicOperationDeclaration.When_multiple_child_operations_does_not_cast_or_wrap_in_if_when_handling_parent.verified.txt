// <auto-generated />
// OperationChild2ExecutorPipeline

using Blueprint;
using Microsoft.Extensions.Logging;
using System.Threading.Tasks;

namespace Blueprint.Tests.Core
{
    public class OperationChild2ExecutorPipeline : Blueprint.IOperationExecutorPipeline
    {
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, string, System.Exception> _ApiOperationHandlerExecuting = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String, System.String>(Microsoft.Extensions.Logging.LogLevel.Debug, new Microsoft.Extensions.Logging.EventId(2, "ApiOperationHandlerExecuting"), "Executing API operation {OperationType} with handler {HandlerType}");
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, System.Exception> _AnoncriticalApiExceptionhasoccurredwithmessageExceptionMessage = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String>(Microsoft.Extensions.Logging.LogLevel.Information, new Microsoft.Extensions.Logging.EventId(145, "A non-critical ApiException has occurred with message {ExceptionMessage}"), "A non-critical ApiException has occurred with message {ExceptionMessage}");
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, System.Exception> _AnunhandledexceptionhasoccurredwithmessageExceptionMessage = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String>(Microsoft.Extensions.Logging.LogLevel.Error, new Microsoft.Extensions.Logging.EventId(146, "An unhandled exception has occurred with message {ExceptionMessage}"), "An unhandled exception has occurred with message {ExceptionMessage}");

        private readonly Microsoft.Extensions.Logging.ILogger _logger;
        private readonly Blueprint.IApiOperationHandler<Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationBase> _operationBaseIApiOperationHandler;
        private readonly Blueprint.IApiOperationHandler<Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationChild2> _operationChild2IApiOperationHandler;

        public OperationChild2ExecutorPipeline(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Blueprint.IApiOperationHandler<Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationBase> operationBaseIApiOperationHandler, Blueprint.IApiOperationHandler<Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationChild2> operationChild2IApiOperationHandler)
        {
            _logger = loggerFactory.CreateLogger("OperationChild2ExecutorPipeline");
            _operationBaseIApiOperationHandler = operationBaseIApiOperationHandler;
            _operationChild2IApiOperationHandler = operationChild2IApiOperationHandler;
        }

        public async System.Threading.Tasks.Task<Blueprint.OperationResult> ExecuteAsync(Blueprint.ApiOperationContext context)
        {
            using var activityOfOperationChild2Pipeline = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("OperationChild2Pipeline", System.Diagnostics.ActivityKind.Internal);
            var operationChild2 = (Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationChild2) context.Operation;
            try
            {

                // ValidationMiddlewareBuilder

                // OperationExecutorMiddlewareBuilder
                using var activityOfTestApiOperationHandlerBlueprintTestsCoreGiven_PolymorphicOperationDeclarationOperationBase = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("TestApiOperationHandler<Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationBase>", System.Diagnostics.ActivityKind.Internal);
                _ApiOperationHandlerExecuting(_logger, "OperationChild2", _operationBaseIApiOperationHandler.GetType().Name, null);
                await _operationBaseIApiOperationHandler.Handle(operationChild2, context);
                activityOfTestApiOperationHandlerBlueprintTestsCoreGiven_PolymorphicOperationDeclarationOperationBase?.Dispose();
                using var activityOfTestApiOperationHandlerBlueprintTestsCoreGiven_PolymorphicOperationDeclarationOperationChild2 = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("TestApiOperationHandler<Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationChild2>", System.Diagnostics.ActivityKind.Internal);
                _ApiOperationHandlerExecuting(_logger, "OperationChild2", _operationChild2IApiOperationHandler.GetType().Name, null);
                await _operationChild2IApiOperationHandler.Handle(operationChild2, context);
                activityOfTestApiOperationHandlerBlueprintTestsCoreGiven_PolymorphicOperationDeclarationOperationChild2?.Dispose();

                // ReturnFrameMiddlewareBuilder
                return Blueprint.NoResultOperationResult.Instance;
            }
            catch (Blueprint.Validation.ValidationException e)
            {
                if (context.Activity != null)
                {
                    OpenTelemetry.Trace.ActivityExtensions.SetStatus(context.Activity, OpenTelemetry.Trace.Status.Ok);
                }
                var validationFailedOperationResult = new Blueprint.Middleware.ValidationFailedOperationResult(e.ValidationResults);
                return validationFailedOperationResult;
            }
            catch (System.ComponentModel.DataAnnotations.ValidationException e)
            {
                if (context.Activity != null)
                {
                    OpenTelemetry.Trace.ActivityExtensions.SetStatus(context.Activity, OpenTelemetry.Trace.Status.Ok);
                }
                var validationFailedOperationResult = Blueprint.Middleware.ValidationMiddlewareBuilder.ToValidationFailedOperationResult(e);
                return validationFailedOperationResult;
            }
            catch (System.Exception e)
            {
                if (e is Blueprint.ApiException apiException && apiException.HttpStatus < 500)
                {
                    _AnoncriticalApiExceptionhasoccurredwithmessageExceptionMessage(_logger, e.Message, null);
                    if (context.Activity != null)
                    {
                        OpenTelemetry.Trace.ActivityExtensions.SetStatus(context.Activity, OpenTelemetry.Trace.Status.Ok);
                    }
                }
                else
                {
                    Blueprint.Diagnostics.BlueprintActivitySource.RecordException(context.Activity, e, false);
                    _AnunhandledexceptionhasoccurredwithmessageExceptionMessage(_logger, e.Message, null);
                    if (context.Activity != null)
                    {
                        OpenTelemetry.Trace.ActivityExtensions.SetStatus(context.Activity, OpenTelemetry.Trace.Status.Error);
                    }
                }
                return new Blueprint.UnhandledExceptionOperationResult(e);
            }
        }

        public async System.Threading.Tasks.Task<Blueprint.OperationResult> ExecuteNestedAsync(Blueprint.ApiOperationContext context)
        {
            using var activityOfOperationChild2NestedPipeline = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("OperationChild2NestedPipeline", System.Diagnostics.ActivityKind.Internal);
            var operationChild2 = (Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationChild2) context.Operation;
            try
            {

                // ValidationMiddlewareBuilder

                // OperationExecutorMiddlewareBuilder
                using var activityOfTestApiOperationHandlerBlueprintTestsCoreGiven_PolymorphicOperationDeclarationOperationBase = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("TestApiOperationHandler<Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationBase>", System.Diagnostics.ActivityKind.Internal);
                _ApiOperationHandlerExecuting(_logger, "OperationChild2", _operationBaseIApiOperationHandler.GetType().Name, null);
                await _operationBaseIApiOperationHandler.Handle(operationChild2, context);
                activityOfTestApiOperationHandlerBlueprintTestsCoreGiven_PolymorphicOperationDeclarationOperationBase?.Dispose();
                using var activityOfTestApiOperationHandlerBlueprintTestsCoreGiven_PolymorphicOperationDeclarationOperationChild2 = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("TestApiOperationHandler<Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationChild2>", System.Diagnostics.ActivityKind.Internal);
                _ApiOperationHandlerExecuting(_logger, "OperationChild2", _operationChild2IApiOperationHandler.GetType().Name, null);
                await _operationChild2IApiOperationHandler.Handle(operationChild2, context);
                activityOfTestApiOperationHandlerBlueprintTestsCoreGiven_PolymorphicOperationDeclarationOperationChild2?.Dispose();

                // ReturnFrameMiddlewareBuilder
                return Blueprint.NoResultOperationResult.Instance;
            }
            catch (Blueprint.Validation.ValidationException e)
            {
                if (context.Activity != null)
                {
                    OpenTelemetry.Trace.ActivityExtensions.SetStatus(context.Activity, OpenTelemetry.Trace.Status.Ok);
                }
                var validationFailedOperationResult = new Blueprint.Middleware.ValidationFailedOperationResult(e.ValidationResults);
                return validationFailedOperationResult;
            }
            catch (System.ComponentModel.DataAnnotations.ValidationException e)
            {
                if (context.Activity != null)
                {
                    OpenTelemetry.Trace.ActivityExtensions.SetStatus(context.Activity, OpenTelemetry.Trace.Status.Ok);
                }
                var validationFailedOperationResult = Blueprint.Middleware.ValidationMiddlewareBuilder.ToValidationFailedOperationResult(e);
                return validationFailedOperationResult;
            }
            catch (System.Exception e)
            {
                if (e is Blueprint.ApiException apiException && apiException.HttpStatus < 500)
                {
                    _AnoncriticalApiExceptionhasoccurredwithmessageExceptionMessage(_logger, e.Message, null);
                    if (context.Activity != null)
                    {
                        OpenTelemetry.Trace.ActivityExtensions.SetStatus(context.Activity, OpenTelemetry.Trace.Status.Ok);
                    }
                }
                else
                {
                    Blueprint.Diagnostics.BlueprintActivitySource.RecordException(context.Activity, e, false);
                    _AnunhandledexceptionhasoccurredwithmessageExceptionMessage(_logger, e.Message, null);
                    if (context.Activity != null)
                    {
                        OpenTelemetry.Trace.ActivityExtensions.SetStatus(context.Activity, OpenTelemetry.Trace.Status.Error);
                    }
                }
                return new Blueprint.UnhandledExceptionOperationResult(e);
            }
        }
    }
}
