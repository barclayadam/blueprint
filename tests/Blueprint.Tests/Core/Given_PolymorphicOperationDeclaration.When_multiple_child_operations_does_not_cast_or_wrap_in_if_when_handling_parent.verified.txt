// <auto-generated />
// OperationChild2ExecutorPipeline

using Blueprint;
using Blueprint.Errors;
using Microsoft.Extensions.Logging;
using System.Threading.Tasks;

namespace Blueprint.Tests.Core
{
    public class OperationChild2ExecutorPipeline : Blueprint.IOperationExecutorPipeline
    {
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, string, System.Exception> _ApiOperationHandlerExecuting = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String, System.String>(Microsoft.Extensions.Logging.LogLevel.Debug, new Microsoft.Extensions.Logging.EventId(2, "ApiOperationHandlerExecuting"), "Executing API operation {OperationType} with handler {HandlerType}");

        private readonly Microsoft.Extensions.Logging.ILogger _logger;
        private readonly Blueprint.IApiOperationHandler<Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationBase> _operationBaseIApiOperationHandler;
        private readonly Blueprint.IApiOperationHandler<Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationChild2> _operationChild2IApiOperationHandler;
        private readonly Blueprint.Errors.IErrorLogger _errorLogger;

        public OperationChild2ExecutorPipeline(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Blueprint.IApiOperationHandler<Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationBase> operationBaseIApiOperationHandler, Blueprint.IApiOperationHandler<Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationChild2> operationChild2IApiOperationHandler, Blueprint.Errors.IErrorLogger errorLogger)
        {
            _logger = loggerFactory.CreateLogger("OperationChild2ExecutorPipeline");
            _operationBaseIApiOperationHandler = operationBaseIApiOperationHandler;
            _operationChild2IApiOperationHandler = operationChild2IApiOperationHandler;
            _errorLogger = errorLogger;
        }

        public async System.Threading.Tasks.Task<Blueprint.OperationResult> ExecuteAsync(Blueprint.ApiOperationContext context)
        {
            var operationChild2 = (Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationChild2) context.Operation;
            try
            {

                // OperationExecutorMiddlewareBuilder
                using var activityOfoperationBaseTestApiOperationHandler = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("operationBaseTestApiOperationHandler", System.Diagnostics.ActivityKind.Internal);
                _ApiOperationHandlerExecuting(_logger, "OperationChild2", _operationBaseIApiOperationHandler.GetType().Name, null);
                await _operationBaseIApiOperationHandler.Handle(operationChild2, context);
                activityOfoperationBaseTestApiOperationHandler?.Dispose();
                using var activityOfoperationChild2TestApiOperationHandler = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("operationChild2TestApiOperationHandler", System.Diagnostics.ActivityKind.Internal);
                _ApiOperationHandlerExecuting(_logger, "OperationChild2", _operationChild2IApiOperationHandler.GetType().Name, null);
                await _operationChild2IApiOperationHandler.Handle(operationChild2, context);
                activityOfoperationChild2TestApiOperationHandler?.Dispose();

                // ReturnFrameMiddlewareBuilder
                return Blueprint.NoResultOperationResult.Instance;
            }
            catch (System.Exception e)
            {
                var userAuthorisationContext = context.UserAuthorisationContext;
                var identifier = new Blueprint.Authorisation.UserExceptionIdentifier(userAuthorisationContext);

                userAuthorisationContext?.PopulateMetadata((k, v) => e.Data[k] = v?.ToString());

                var result_of_LogAsync = await _errorLogger.LogAsync(e, null, identifier);

                Blueprint.Diagnostics.BlueprintActivitySource.RecordException(context.Activity, e);
                return new Blueprint.UnhandledExceptionOperationResult(e);
            }
        }

        public async System.Threading.Tasks.Task<Blueprint.OperationResult> ExecuteNestedAsync(Blueprint.ApiOperationContext context)
        {
            var operationChild2 = (Blueprint.Tests.Core.Given_PolymorphicOperationDeclaration.OperationChild2) context.Operation;
            try
            {

                // OperationExecutorMiddlewareBuilder
                using var activityOfoperationBaseTestApiOperationHandler = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("operationBaseTestApiOperationHandler", System.Diagnostics.ActivityKind.Internal);
                _ApiOperationHandlerExecuting(_logger, "OperationChild2", _operationBaseIApiOperationHandler.GetType().Name, null);
                await _operationBaseIApiOperationHandler.Handle(operationChild2, context);
                activityOfoperationBaseTestApiOperationHandler?.Dispose();
                using var activityOfoperationChild2TestApiOperationHandler = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("operationChild2TestApiOperationHandler", System.Diagnostics.ActivityKind.Internal);
                _ApiOperationHandlerExecuting(_logger, "OperationChild2", _operationChild2IApiOperationHandler.GetType().Name, null);
                await _operationChild2IApiOperationHandler.Handle(operationChild2, context);
                activityOfoperationChild2TestApiOperationHandler?.Dispose();

                // ReturnFrameMiddlewareBuilder
                return Blueprint.NoResultOperationResult.Instance;
            }
            catch (System.Exception e)
            {
                var userAuthorisationContext = context.UserAuthorisationContext;
                var identifier = new Blueprint.Authorisation.UserExceptionIdentifier(userAuthorisationContext);

                userAuthorisationContext?.PopulateMetadata((k, v) => e.Data[k] = v?.ToString());

                var result_of_LogAsync = await _errorLogger.LogAsync(e, null, identifier);

                Blueprint.Diagnostics.BlueprintActivitySource.RecordException(context.Activity, e);
                return new Blueprint.UnhandledExceptionOperationResult(e);
            }
        }
    }
}
