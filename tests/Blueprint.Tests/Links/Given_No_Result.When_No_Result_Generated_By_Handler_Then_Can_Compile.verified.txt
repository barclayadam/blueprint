// <auto-generated />
// OperationChild2ExecutorPipeline

using Blueprint;
using Microsoft.Extensions.Logging;
using System.Threading.Tasks;

namespace Blueprint.Generated
{
    public class OperationChild2ExecutorPipeline : Blueprint.IOperationExecutorPipeline
    {
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, string, System.Exception> _ApiOperationExecuting = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String, System.String>(Microsoft.Extensions.Logging.LogLevel.Debug, new Microsoft.Extensions.Logging.EventId(1, "ApiOperationExecuting"), "Executing API operation {OperationType} with handler {HandlerType}");
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, System.Exception> _NonException = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String>(Microsoft.Extensions.Logging.LogLevel.Information, new Microsoft.Extensions.Logging.EventId(4, "Non500Exception"), "A non-5xx ApiException has occurred with message {ExceptionMessage}");
        private static readonly System.Action<Microsoft.Extensions.Logging.ILogger, string, System.Exception> _UnhandledException = Microsoft.Extensions.Logging.LoggerMessage.Define<System.String>(Microsoft.Extensions.Logging.LogLevel.Error, new Microsoft.Extensions.Logging.EventId(5, "UnhandledException"), "An unhandled exception has occurred with message {ExceptionMessage}");

        private readonly Microsoft.Extensions.Logging.ILogger _logger;
        private readonly Blueprint.IApiOperationHandler<Blueprint.Tests.LinkGeneration.Given_No_Result.OperationBase> _operationBaseIApiOperationHandler;
        private readonly Blueprint.IApiOperationHandler<Blueprint.Tests.LinkGeneration.Given_No_Result.OperationChild2> _operationChild2IApiOperationHandler;

        public OperationChild2ExecutorPipeline(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Blueprint.IApiOperationHandler<Blueprint.Tests.LinkGeneration.Given_No_Result.OperationBase> operationBaseIApiOperationHandler, Blueprint.IApiOperationHandler<Blueprint.Tests.LinkGeneration.Given_No_Result.OperationChild2> operationChild2IApiOperationHandler)
        {
            _logger = loggerFactory.CreateLogger("OperationChild2ExecutorPipeline");
            _operationBaseIApiOperationHandler = operationBaseIApiOperationHandler;
            _operationChild2IApiOperationHandler = operationChild2IApiOperationHandler;
        }

        public async System.Threading.Tasks.Task<Blueprint.OperationResult> ExecuteAsync(Blueprint.ApiOperationContext context)
        {
            using var activityOfOperationChild2Pipeline = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("OperationChild2Pipeline", System.Diagnostics.ActivityKind.Internal);
            var operationChild2 = (Blueprint.Tests.LinkGeneration.Given_No_Result.OperationChild2) context.Operation;
            try
            {

                // ValidationMiddlewareBuilder

                // OperationExecutorMiddlewareBuilder
                using var activityOfIApiOperationHandlerBlueprintTestsLinkGenerationGiven_No_ResultOperationBase = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("IApiOperationHandler<Blueprint.Tests.LinkGeneration.Given_No_Result.OperationBase>", System.Diagnostics.ActivityKind.Internal);
                _ApiOperationExecuting(_logger, "OperationChild2", _operationBaseIApiOperationHandler.GetType().Name, null);
                await _operationBaseIApiOperationHandler.Handle(operationChild2, context);
                activityOfIApiOperationHandlerBlueprintTestsLinkGenerationGiven_No_ResultOperationBase?.Dispose();
                using var activityOfIApiOperationHandlerBlueprintTestsLinkGenerationGiven_No_ResultOperationChild2 = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("IApiOperationHandler<Blueprint.Tests.LinkGeneration.Given_No_Result.OperationChild2>", System.Diagnostics.ActivityKind.Internal);
                _ApiOperationExecuting(_logger, "OperationChild2", _operationChild2IApiOperationHandler.GetType().Name, null);
                await _operationChild2IApiOperationHandler.Handle(operationChild2, context);
                activityOfIApiOperationHandlerBlueprintTestsLinkGenerationGiven_No_ResultOperationChild2?.Dispose();

                // LinkGeneratorMiddlewareBuilder

                // ReturnFrameMiddlewareBuilder
                return Blueprint.NoResultOperationResult.Instance;
            }
            catch (Blueprint.Validation.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = new Blueprint.Middleware.ValidationFailedOperationResult(e.ValidationResults);
                return validationFailedOperationResult;
            }
            catch (System.ComponentModel.DataAnnotations.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = Blueprint.Middleware.ValidationMiddlewareBuilder.ToValidationFailedOperationResult(e);
                return validationFailedOperationResult;
            }
            catch (System.Exception e)
            {
                if (e is Blueprint.ApiException apiException && apiException.HttpStatus < 500)
                {
                    _NonException(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "OK");
                }
                else
                {
                    Blueprint.Diagnostics.BlueprintActivitySource.RecordException(context.Activity, e, false);
                    _UnhandledException(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "ERROR");
                    context.Activity?.SetTag("otel.status_description", e.Message);
                }
                return new Blueprint.UnhandledExceptionOperationResult(e);
            }
        }

        public async System.Threading.Tasks.Task<Blueprint.OperationResult> ExecuteNestedAsync(Blueprint.ApiOperationContext context)
        {
            using var activityOfOperationChild2NestedPipeline = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("OperationChild2NestedPipeline", System.Diagnostics.ActivityKind.Internal);
            var operationChild2 = (Blueprint.Tests.LinkGeneration.Given_No_Result.OperationChild2) context.Operation;
            try
            {

                // ValidationMiddlewareBuilder

                // OperationExecutorMiddlewareBuilder
                using var activityOfIApiOperationHandlerBlueprintTestsLinkGenerationGiven_No_ResultOperationBase = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("IApiOperationHandler<Blueprint.Tests.LinkGeneration.Given_No_Result.OperationBase>", System.Diagnostics.ActivityKind.Internal);
                _ApiOperationExecuting(_logger, "OperationChild2", _operationBaseIApiOperationHandler.GetType().Name, null);
                await _operationBaseIApiOperationHandler.Handle(operationChild2, context);
                activityOfIApiOperationHandlerBlueprintTestsLinkGenerationGiven_No_ResultOperationBase?.Dispose();
                using var activityOfIApiOperationHandlerBlueprintTestsLinkGenerationGiven_No_ResultOperationChild2 = Blueprint.Diagnostics.BlueprintActivitySource.ActivitySource.StartActivity("IApiOperationHandler<Blueprint.Tests.LinkGeneration.Given_No_Result.OperationChild2>", System.Diagnostics.ActivityKind.Internal);
                _ApiOperationExecuting(_logger, "OperationChild2", _operationChild2IApiOperationHandler.GetType().Name, null);
                await _operationChild2IApiOperationHandler.Handle(operationChild2, context);
                activityOfIApiOperationHandlerBlueprintTestsLinkGenerationGiven_No_ResultOperationChild2?.Dispose();

                // LinkGeneratorMiddlewareBuilder

                // ReturnFrameMiddlewareBuilder
                return Blueprint.NoResultOperationResult.Instance;
            }
            catch (Blueprint.Validation.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = new Blueprint.Middleware.ValidationFailedOperationResult(e.ValidationResults);
                return validationFailedOperationResult;
            }
            catch (System.ComponentModel.DataAnnotations.ValidationException e)
            {
                context.Activity?.SetTag("otel.status_code", "OK");
                var validationFailedOperationResult = Blueprint.Middleware.ValidationMiddlewareBuilder.ToValidationFailedOperationResult(e);
                return validationFailedOperationResult;
            }
            catch (System.Exception e)
            {
                if (e is Blueprint.ApiException apiException && apiException.HttpStatus < 500)
                {
                    _NonException(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "OK");
                }
                else
                {
                    Blueprint.Diagnostics.BlueprintActivitySource.RecordException(context.Activity, e, false);
                    _UnhandledException(_logger, e.Message, e);
                    context.Activity?.SetTag("otel.status_code", "ERROR");
                    context.Activity?.SetTag("otel.status_description", e.Message);
                }
                return new Blueprint.UnhandledExceptionOperationResult(e);
            }
        }
    }
}
